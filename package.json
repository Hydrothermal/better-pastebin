{
    "name": "better-pastebin",
    "author": {
        "name": "Hydrothermal",
        "email": "curradid@yahoo.com"
    },
    "version": "0.1.0",
    "description": "The Pastebin API wrapper Node deserves",
    "keywords": [
        "pastebin",
        "paste",
        "api"
    ],
    "dependencies": {
        "request": ">=2.51.0",
        "cheerio": ">=0.18.0",
        "xml2js": ">=0.4.4"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/Hydrothermal/BetterPastebin"
    },
    "bugs": {
        "url": "https://github.com/Hydrothermal/BetterPastebin/issues"
    },
    "license": "GPL-3.0",
    "readme": "#better-pastebin\n\nThe Pastebin API wrapper Node deserves. `better-pastebin` is the most fully-featured module available for connecting to [pastebin.com](http://pastebin.com), both to its API and directly to the site itself for accomplishing tasks that the API doesn't support. It uses [`cheerio`](https://github.com/cheeriojs/cheerio), [`request`](https://github.com/request/request), and [`xml2js`](https://github.com/Leonidas-from-XIV/node-xml2js).\n\n##Installation\n    npm install better-pastebin\n\n##Example\n```javascript\nvar paste = require(\"better-pastebin\");\n\npaste.setDevKey(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\npaste.login(\"username\", \"password\", function(success, data) {\n    if(!success) {\n        console.log(\"Failed (\" + data + \")\");\n        return false;\n    }\n\n    paste.create({\n        contents: \"test contents\",\n        name: \"test paste\",\n        privacy: \"1\"\n    }, function(success, data) {\n        if(success) {\n            //data contains the URL of the created paste\n        } else {\n            //data contains an Error object indicating why the creation failed\n        }\n    });\n});\n```\n\n##Usage\n###Setting the devkey\n```javascript\npaste.setDevKey(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\n```\n\nThis is necessary before performing any other API call. It's synchronous, so it doesn't require a callback. You can find your devkey [on pastebin.com](http://pastebin.com/api) after signing in.\n\n###Logging in\n```javascript\npaste.login(username, password, function(success, data) {\n    //data contains this session's userkey\n});\n```\n\nLogs in to Pastebin. Any actions requiring a login should be placed within the callback.\n\n###Getting a paste\n```javascript\npaste.get(paste_id, function(success, data) {\n    //data contains the contents of the paste \n});\n```\n\nGets the contents of a paste. Note that the ID of a paste should be supplied, not the URL - e.g. `uRUYcpnR`, not `http://pastebin.com/uRUYcpnR`.\n\n###Creating a paste\n```javascript\npaste.create(options, function(success, data) {\n    //data contains the URL of the created paste\n});\n```\n\nCreates a new paste. You do not need to be logged in to do this, but you can only create global or unlisted pastes as a guest. `options` can either be the contents of the paste as a string, or an object containing one or more of the following keys:\n\n* `options.contents`: The contents of the paste; this is the only mandatory property.\n* `options.anonymous` (default: `false`): If true, the paste will be created as a guest even if logged in.\n* `options.expires` (default: `\"N\"`): When the paste should expire \n* `options.format` (default: `\"text\"`): The syntax highlighting of the paste.\n* `options.privacy` (default: `\"0\"`): The privacy of the paste.\n* `options.name` (default: `\"\"`): The name of the paste.\n\n###Creating a paste from a file\n```javascript\npaste.createFromFile(options, function(success, data) {\n    //data contains the URL of the created paste\n});\n```\n\nCreates a new paste from the contents of a file. This works the same way that `paste.create` does, except that `options.path` should be specified instead of `options.contents`, or `options` should be the path to the file you want to upload as a string. It also accepts an additional key, `options.encoding`:\n\n* `options.encoding` (default: `\"utf8\"`): The encoding of the file.\n\n###Editing a paste\n```javascript\npaste.edit(paste_id, options, function(success, data) {\n    //data contains the new contents of the paste\n});\n```\n\nUpdates a paste's contents. You must be logged in to do this, and you can only edit a paste that you created. Note that the ID of a paste should be supplied, not the URL - e.g. `uRUYcpnR`, not `http://pastebin.com/uRUYcpnR`. `options` can either be the new contents of the paste as a string, or an object containing one or more of the following keys:\n\n* `options.contents`: The new contents of the paste; this is the only mandatory property.\n* `options.expires`: When the paste should expire \n* `options.format`: The syntax highlighting of the paste.\n* `options.privacy`: The privacy of the paste.\n* `options.name`: The name of the paste.\n\nIf left unspecified, these default to the paste's existing options.\n\n###Listing the logged-in user's pastes\n```javascript\npaste.list(limit, function(success, data) {\n    //data contains an array of objects of information about each paste\n});\n```\n\nLists up to 1,000 of the logged-in user's created pastes. `limit` specifies how many pastes to return; it can be a number between 1 and 1,000, and defaults to 50. You must be logged in to do this.\n\n###Listing trending pastes\n```javascript\npaste.listTrending(function(success, data) {\n    //data contains an array of objects of information about each paste\n});\n```\n\nLists currently trending pastes. The array of pastes is identical in structure to the one returned by `paste.list`.\n\n###Deleting a paste\n```javascript\npaste.delete(paste_id, function(success, data) {\n    //data contains the ID of the deleted paste\n});\n```\n\nDeletes a paste. You must be logged in to do this, and you can only delete a paste that you created. Note that the ID of a paste should be supplied, not the URL - e.g. `uRUYcpnR`, not `http://pastebin.com/uRUYcpnR`.\n\n###Getting information about the logged-in user\n```javascript\npaste.user(function(success, data) {\n    //data contains an object of information about the logged-in user\n});\n```\n\nReturns information about the logged-in user. You must be logged in to do this.\n\n###Valid options\n####`expires`\n    N = Never\n    10M = 10 Minutes\n    1H = 1 Hour\n    1D = 1 Day\n    1W = 1 Week\n    2W = 2 Weeks\n    1M = 1 Month\n\n####`privacy`\n    0 = Public\n    1 = Unlisted\n    2 = Private\n\nNote that private pastes can only be created if you are signed in. These values should be passed as a string, because `0` is a falsy value and can cause some issues.\n\n####`format`\nRefer to http://pastebin.com/api#5 for the full list of syntax highlighting options.\n\n###License\nAll code in this repository is licensed under GPL v3. See `LICENSE` for more information.",
    "readmeFilename": "README.md",
    "homepage": "https://github.com/Hydrothermal/BetterPastebin",
    "_id": "better-pastebin@0.1.0",
    "_from": "..\\better-pastebin"
}